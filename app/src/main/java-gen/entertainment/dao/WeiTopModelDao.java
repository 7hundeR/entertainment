package entertainment.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thunder.entertainment.dao.table.WeiTopModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEI_TOP_MODEL".
*/
public class WeiTopModelDao extends AbstractDao<WeiTopModel, Long> {

    public static final String TABLENAME = "WEI_TOP_MODEL";

    /**
     * Properties of entity WeiTopModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Author_url = new Property(1, String.class, "author_url", false, "AUTHOR_URL");
        public final static Property Author_name = new Property(2, String.class, "author_name", false, "AUTHOR_NAME");
        public final static Property Create_time = new Property(3, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Images = new Property(5, String.class, "images", false, "IMAGES");
        public final static Property Video_url = new Property(6, String.class, "video_url", false, "VIDEO_URL");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
    }


    public WeiTopModelDao(DaoConfig config) {
        super(config);
    }
    
    public WeiTopModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEI_TOP_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AUTHOR_URL\" TEXT," + // 1: author_url
                "\"AUTHOR_NAME\" TEXT," + // 2: author_name
                "\"CREATE_TIME\" TEXT," + // 3: create_time
                "\"CONTENT\" TEXT," + // 4: content
                "\"IMAGES\" TEXT," + // 5: images
                "\"VIDEO_URL\" TEXT," + // 6: video_url
                "\"TYPE\" INTEGER NOT NULL );"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEI_TOP_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeiTopModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author_url = entity.getAuthor_url();
        if (author_url != null) {
            stmt.bindString(2, author_url);
        }
 
        String author_name = entity.getAuthor_name();
        if (author_name != null) {
            stmt.bindString(3, author_name);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(6, images);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(7, video_url);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeiTopModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author_url = entity.getAuthor_url();
        if (author_url != null) {
            stmt.bindString(2, author_url);
        }
 
        String author_name = entity.getAuthor_name();
        if (author_name != null) {
            stmt.bindString(3, author_name);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(6, images);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(7, video_url);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeiTopModel readEntity(Cursor cursor, int offset) {
        WeiTopModel entity = new WeiTopModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // create_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // images
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // video_url
            cursor.getInt(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeiTopModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreate_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImages(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideo_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeiTopModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeiTopModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeiTopModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
